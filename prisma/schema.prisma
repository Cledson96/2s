// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model motoboys {
  id         Int       @id @default(autoincrement())
  nome       String    @db.VarChar(50)
  email      String    @unique @db.VarChar(150)
  endereco   String?   @db.Text
  senha      String?   @db.Text
  cpf        String?   @db.Text
  telefone   String?   @db.Text
  pix        String?   @db.Text
  created_at DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  pedidos    pedidos[]
}

model clientes {
  id         Int       @id @default(autoincrement())
  nome       String    @db.VarChar(50)
  email      String?   @db.VarChar(150)
  telefone   String?   @db.Text
  telefone2  String?   @db.Text
  created_at DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  pedidos    pedidos[]
}

model pedidos {
  id         Int       @id @default(autoincrement())
  cliente_id Int
  motoboy_id Int
  expedido   Int
  insucesso  Int
  data       DateTime
  entrada    DateTime  @default(now()) @db.Timestamp(0)
  created_at DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  cliente    clientes? @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  motoboy    motoboys? @relation(fields: [motoboy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model admin {
  id            Int         @id @default(autoincrement())
  nome          String      @db.VarChar(50)
  email         String      @unique @db.VarChar(150)
  senha         String?     @db.VarChar(150)
  telefone      String?     @db.Text
  foto          String?     @db.Text
  pix           String?     @db.Text
  ativo         Boolean     @db.Boolean
  administrador Boolean     @db.Boolean
  created_at    DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamp(0)
  historico     historico[]
}

model historico {
  id         Int      @id @default(autoincrement())
  admin_id   Int
  alteracao  String   @db.Text
  created_at DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  admin      admin?   @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
